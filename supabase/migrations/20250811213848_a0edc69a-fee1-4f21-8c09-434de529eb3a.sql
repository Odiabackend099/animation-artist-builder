-- Create leads and related tables, view, indexes, and RLS policies

-- Tables
create table if not exists public.leads (
  id uuid primary key default gen_random_uuid(),
  created_at timestamptz default now(),
  name text not null,
  email text not null,
  whatsapp text not null,
  business_name text,
  industry text,
  intent text,
  language text default 'en-NG',
  telegram text,
  source text default 'lovable'
);

create table if not exists public.provisioning_jobs (
  id uuid primary key default gen_random_uuid(),
  created_at timestamptz default now(),
  lead_id uuid references public.leads(id) on delete cascade,
  status text check (status in ('queued','provisioning','live','failed')) default 'queued',
  priority int default 5,
  retries int default 0,
  agent_template_id text not null,
  agent_slug text,
  delivery_summary jsonb default '{}'::jsonb,
  last_error text
);

create table if not exists public.events (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  lead_id uuid references public.leads(id) on delete cascade,
  type text,
  detail jsonb
);

create table if not exists public.usage_tracking (
  id bigint generated by default as identity primary key,
  created_at timestamptz default now(),
  agent_slug text,
  direction text check (direction in ('in','out')),
  msg_cost_ngn numeric default 0,
  tokens int default 0,
  lead_id uuid references public.leads(id),
  remaining int,
  expires_at timestamptz
);

-- View for the Dashboard
create or replace view public.v_lead_status as
select l.*, j.status, j.agent_slug, j.delivery_summary
from public.leads l
left join lateral (
  select status, agent_slug, delivery_summary
  from public.provisioning_jobs j
  where j.lead_id = l.id
  order by j.created_at desc limit 1
) j on true;

-- Indexes
create index if not exists idx_jobs_status_created on public.provisioning_jobs(status, created_at);
create index if not exists idx_leads_email on public.leads(email);
create index if not exists idx_leads_whatsapp on public.leads(whatsapp);

-- RLS
alter table public.leads enable row level security;
alter table public.provisioning_jobs enable row level security;
alter table public.events enable row level security;
alter table public.usage_tracking enable row level security;

-- Policies
-- leads: allow inserts from anon (form submissions), no reads
create policy leads_insert on public.leads for insert to anon with check (true);
create policy leads_no_read on public.leads for select using (false);

-- provisioning_jobs: no reads, service role can do anything
create policy jobs_no_read on public.provisioning_jobs for select using (false);
create policy jobs_service_write on public.provisioning_jobs for all to service_role using (true) with check (true);

-- events: no reads, service role can do anything
create policy events_no_read on public.events for select using (false);
create policy events_service_write on public.events for all to service_role using (true) with check (true);

-- usage_tracking: no reads, service role can do anything
create policy usage_no_read on public.usage_tracking for select using (false);
create policy usage_service_write on public.usage_tracking for all to service_role using (true) with check (true);
